{"version":3,"sources":["Components/shared/Loader/index.js","Components/Login/index.js","Components/Registration/index.js","Components/Vocabulary/Words.js","Components/Vocabulary/AddForm.js","Components/Vocabulary/index.js","Components/Router.js","config/fire.js","Redux/ActionCreators/user.action.js","Redux/ActionCreators/vocabulary.action.js","Redux/Sagas/authorization.saga.js","Redux/ActionCreators/loader.action.js","Redux/Sagas/vacabulary.saga.js","Redux/Sagas/index.js","Redux/Reducers/loader.reducer.js","Redux/Store/configureStore.js","Redux/Reducers/user.reducer.js","Redux/Reducers/vocabulary.reducer.js","App.js","serviceWorker.js","index.js"],"names":["Loader","props","className","Spinner","animation","withRouter","connect","state","loader","user","dispatch","login","type","useState","email","changeEmailValue","password","changePasswordValue","to","md","value","onChange","e","target","label","icon","group","validate","error","success","onClick","color","register","confirmPassword","changeConfirmPasswordValue","alert","vocabulary","changeWord","id","word","deleteWord","Table","bordered","hover","key","map","el","translate","changeFlagInputArea","changeDefaultInputValues","alt","src","addWord","changeWordValue","changeTranslateValue","useEffect","defaultInputValues","trim","isOpenInputArea","history","push","Button","Router","exact","path","Component","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","setUser","setVocabulary","watchaAthorization","db","firestore","action","put","auth","createUserWithEmailAndPassword","then","data","collection","doc","set","catch","er","toString","signInWithEmailAndPassword","get","docs","takeEvery","watchVacabulary","delete","rootSaga","all","authorization","vacabulary","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","filter","store","createStore","applyMiddleware","run","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9424357c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport './styles/_index.scss';\r\n\r\nfunction Loader(props) {\r\n    return(\r\n        <div className='main_loader'>\r\n            <Spinner animation=\"border\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;","import React, {useState} from 'react';\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput } from 'mdbreact';\r\nimport {connect} from \"react-redux\";\r\nimport Loader from \"../shared/Loader\";\r\nimport {Link} from \"react-router-dom\";\r\nimport './styles/_index.scss';\r\nimport {Redirect, withRouter} from \"react-router\";\r\n\r\nfunction Login(props) {\r\n    const [email, changeEmailValue] = useState('');\r\n    const [password, changePasswordValue] = useState('');\r\n\r\n    if(props.user.email) {\r\n        return <Redirect to='vocabulary'/>\r\n    }\r\n\r\n    function login() {\r\n        props.login({\r\n            email: email,\r\n            password: password\r\n        });\r\n    }\r\n\r\n    if(props.loader) {\r\n        return(\r\n            <Loader/>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className='main_form'>\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol md=\"6\" className='form'>\r\n                        <form >\r\n                            <p className=\"h5 text-center mb-4\">Sign up</p>\r\n                            <div className=\"grey-text\">\r\n                                <MDBInput\r\n                                    value={email}\r\n                                    onChange={e => changeEmailValue(e.target.value)}\r\n                                    label=\"Your email\"\r\n                                    icon=\"envelope\"\r\n                                    group\r\n                                    type=\"email\"\r\n                                    validate\r\n                                    error=\"wrong\"\r\n                                    success=\"right\"\r\n                                />\r\n                                <MDBInput\r\n                                    value={password}\r\n                                    onChange={e => changePasswordValue(e.target.value)}\r\n                                    label=\"Your password\"\r\n                                    icon=\"lock\"\r\n                                    group\r\n                                    type=\"password\"\r\n                                    validate\r\n                                />\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                                <MDBBtn onClick={() => login()} color=\"primary\">Login</MDBBtn>\r\n                            </div>\r\n                            <Link to='/registration'>\r\n                                <p className=\"h5 text-center mb-4 auth_link\">Registration</p>\r\n                            </Link>\r\n                        </form>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    loader: state.loader,\r\n    user: state.user\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =>  ({\r\n    login: (user) => {dispatch({type: \"LOGIN_USER\", user: user})}\r\n});\r\n\r\nexport default withRouter(connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Login));\r\n","import React, {useState} from 'react';\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput } from 'mdbreact';\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect, withRouter} from \"react-router\";\r\nimport Loader from \"../shared/Loader\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction Registration(props) {\r\n    const [email, changeEmailValue] = useState('');\r\n    const [password, changePasswordValue] = useState('');\r\n    const [confirmPassword, changeConfirmPasswordValue] = useState('');\r\n\r\n    if(props.user.email) {\r\n        return <Redirect to='vocabulary'/>\r\n    }\r\n\r\n    function register() {\r\n        if(confirmPassword === password) {\r\n            props.register({\r\n                email: email,\r\n                password: password\r\n            });\r\n        } else {\r\n            alert('Passwords do not match')\r\n        }\r\n    }\r\n\r\n    if(props.loader) {\r\n        return(\r\n            <Loader/>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className='main_form'>\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol md=\"6\" className='form'>\r\n                        <form >\r\n                            <p className=\"h5 text-center mb-4\">Sign up</p>\r\n                            <div className=\"grey-text\">\r\n                                <MDBInput\r\n                                    value={email}\r\n                                    onChange={e => changeEmailValue(e.target.value)}\r\n                                    label=\"Your email\"\r\n                                    icon=\"envelope\"\r\n                                    group\r\n                                    type=\"email\"\r\n                                    validate\r\n                                    error=\"wrong\"\r\n                                    success=\"right\"\r\n                                />\r\n                                <MDBInput\r\n                                    value={password}\r\n                                    onChange={e => changePasswordValue(e.target.value)}\r\n                                    label=\"Your password\"\r\n                                    icon=\"lock\"\r\n                                    group\r\n                                    type=\"password\"\r\n                                    validate\r\n                                />\r\n                                <MDBInput\r\n                                    value={confirmPassword}\r\n                                    onChange={e => changeConfirmPasswordValue(e.target.value)}\r\n                                    label=\"Confirm your password\"\r\n                                    icon=\"exclamation-triangle\"\r\n                                    group\r\n                                    type=\"password\"\r\n                                    validate\r\n                                    error=\"wrong\"\r\n                                    success=\"right\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                                <MDBBtn onClick={() => register()} color=\"primary\">Register</MDBBtn>\r\n                            </div>\r\n                            <Link to='/login'>\r\n                                <p className=\"h5 text-center mb-4 auth_link\">Login</p>\r\n                            </Link>\r\n                        </form>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    loader: state.loader,\r\n    user: state.user\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =>  ({\r\n    register: (user) => {dispatch({type: \"REGISTER_USER\", user: user})},\r\n});\r\n\r\nexport default withRouter(connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Registration));\r\n","import React from 'react';\r\nimport {Table} from \"react-bootstrap\";\r\nimport {withRouter} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\nimport './styles/_index.scss';\r\n\r\nfunction Words(props) {\r\n    function changeWord(el) {\r\n        props.changeFlagInputArea(true);\r\n        props.changeDefaultInputValues({id: el.id, word: el.word, translate: el.translate})\r\n    }\r\n\r\n    function deleteWord(el) {\r\n        props.deleteWord(props.user.email, el.id)\r\n    }\r\n\r\n    return(\r\n        <Table className='table' bordered hover >\r\n                <thead>\r\n                <tr key={123}>\r\n                    <th className='word'>Слово</th>\r\n                    <th className='word'>Перевод</th>\r\n                    <th></th>\r\n                    <th></th>\r\n                </tr>\r\n                </thead>\r\n            <tbody>\r\n                {props.vocabulary.map(el => {\r\n                    // kill the automatically generated empty document by firebase\r\n                    if(el.word) {\r\n                        return(\r\n                            <tr key={el.id}>\r\n                                <td className='word'>{el.word}</td>\r\n                                <td className='word'>{el.translate}</td>\r\n                                <td onClick={() => changeWord(el)} className='btn_cell'>\r\n                                    <div className='img_container'>\r\n                                        <img className='change_btn' alt='change img' src='/vocabulary/img/change.png'/>\r\n                                    </div>\r\n                                </td>\r\n                                <td onClick={() => deleteWord(el)} className='btn_cell'>\r\n                                    <div className='img_container'>\r\n                                        <img className='delete_btn' alt='delete img' src='/vocabulary/img/delete.png'/>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    } else return <div></div>\r\n                }\r\n            )}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    vocabulary: state.vocabulary,\r\n    user: state.user\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =>  ({\r\n    changeWord: (user, id, word) => {dispatch({type: \"CHANGE_WORD\",user: user, id: id, word: word})},\r\n    deleteWord: (user, id) => {dispatch({type: \"DELETE_WORD\",user: user, id: id})}\r\n});\r\n\r\nexport default withRouter(connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Words));\r\n","import React, {useState, useEffect} from 'react';\r\nimport {withRouter} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\nimport {MDBBtn, MDBCol, MDBContainer, MDBInput, MDBRow} from \"mdbreact\";\r\nimport './styles/_index.scss';\r\n\r\nfunction AddForm(props) {\r\n    const [word, changeWordValue] = useState('');\r\n    const [translate, changeTranslateValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        if(props.defaultInputValues.word) {\r\n            changeWordValue(props.defaultInputValues.word);\r\n            changeTranslateValue(props.defaultInputValues.translate);\r\n        } else {\r\n            changeWordValue('');\r\n            changeTranslateValue('');\r\n        }\r\n    }, [props.defaultInputValues.word, props.defaultInputValues.translate])\r\n\r\n    function sendWord() {\r\n        if(word.trim() !== '' && translate.trim() !== '') {\r\n            if(props.defaultInputValues.id) {\r\n                props.changeWord(props.user.email, props.defaultInputValues.id, {word: word, translate: translate})\r\n            } else {\r\n                props.addWord(props.user.email, word, translate)\r\n            }\r\n        }\r\n        props.changeFlagInputArea(false)\r\n    }\r\n\r\n    return(\r\n        <MDBContainer className='add_form'>\r\n            <MDBRow>\r\n                <MDBCol md=\"6\" className='form'>\r\n                    <form>\r\n                        <div className=\"grey-text\">\r\n                            <MDBInput\r\n                                value={word}\r\n                                onChange={e => changeWordValue(e.target.value)}\r\n                                label=\"Слово\"\r\n                                group\r\n                                validate\r\n                                error=\"wrong\"\r\n                                success=\"right\"\r\n                            />\r\n                            <MDBInput\r\n                                value={translate}\r\n                                onChange={e => changeTranslateValue(e.target.value)}\r\n                                label=\"Перевод\"\r\n                                group\r\n                                validate\r\n                            />\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                            <MDBBtn onClick={() => sendWord()} color=\"primary\">Отправить</MDBBtn>\r\n                        </div>\r\n                    </form>\r\n                </MDBCol>\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    loader: state.loader,\r\n    user: state.user,\r\n    vocabulary: state.vocabulary\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =>  ({\r\n    addWord: (user, word, translate) => {dispatch({type: \"ADD_WORD\",  word: word, translate: translate, user: user})},\r\n    changeWord: (user, id, word) => {dispatch({type: \"CHANGE_WORD\",user: user, id: id, word: word})}\r\n});\r\n\r\nexport default withRouter(connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddForm));\r\n","import React, {useState, useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport './styles/_index.scss';\r\nimport Words from \"./Words\";\r\nimport AddForm from \"./AddForm\";\r\nimport Loader from \"../shared/Loader\";\r\nimport {withRouter} from \"react-router\";\r\n\r\nfunction Vocabulary(props) {\r\n    const [isOpenInputArea, changeFlagInputArea] = useState(false);\r\n    const [defaultInputValues, changeDefaultInputValues] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (!props.user.email) {\r\n            props.history.push('/login')\r\n        }\r\n    }, [props.history, props.user.email])\r\n\r\n    if(props.loader) {\r\n        return <Loader/>\r\n    }\r\n\r\n    function handleClick() {\r\n        changeFlagInputArea(!isOpenInputArea);\r\n        changeDefaultInputValues({})\r\n    }\r\n\r\n    return(\r\n        <div className='main'>\r\n            <Button className='add_btn' onClick={() => handleClick()}>{isOpenInputArea? 'отмена' : 'записать новое слово'}</Button>\r\n            {isOpenInputArea?\r\n                <AddForm defaultInputValues={defaultInputValues} changeFlagInputArea={changeFlagInputArea}/> :\r\n                <Words changeDefaultInputValues={changeDefaultInputValues} changeFlagInputArea={changeFlagInputArea}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    loader: state.loader,\r\n    user: state.user,\r\n    vocabulary: state.vocabulary\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =>  ({\r\n});\r\n\r\nexport default withRouter(connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Vocabulary));","import React, {Component} from 'react';\r\nimport {Redirect, Route, Switch} from \"react-router\";\r\nimport Login from \"./Login\";\r\nimport Registration from \"./Registration\";\r\nimport Vocabulary from \"./Vocabulary\";\r\n\r\nclass Router extends Component {\r\n\r\n    render() {\r\n        return(\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                   <Redirect to='/login'/>\r\n                </Route>\r\n                <Route exact path='/login'>\r\n                    <Login />\r\n                </Route>\r\n                <Route exact path=\"/registration\">\r\n                    <Registration/>\r\n                </Route>\r\n                <Route exact path=\"/vocabulary\">\r\n                    <Vocabulary/>\r\n                </Route>\r\n            </Switch>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Router;","import firebase from \"firebase\";\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyDSfYJwtUlA97quBe721nNef9UeWFP4AxU\",\r\n    authDomain: \"vocabulary-app-21cad.firebaseapp.com\",\r\n    databaseURL: \"https://vocabulary-app-21cad.firebaseio.com\",\r\n    projectId: \"vocabulary-app-21cad\",\r\n    storageBucket: \"vocabulary-app-21cad.appspot.com\",\r\n    messagingSenderId: \"657214350951\",\r\n    appId: \"1:657214350951:web:04e203b28a7e28f27596c2\"\r\n};\r\n\r\nconst fire = firebase.initializeApp(config);\r\nexport default fire;","export const setUser = (user) => ({type: 'SET_USER', user: user});","export const setVocabulary = (vocabulary) => ({type: 'SET_VOCABULARY', vocabulary: vocabulary});\r\nexport const setWord = (word) => ({type: 'SUCCESS_SET_WORD', word: word});\r\nexport const changeWordSuccess = (word) => ({type: 'SUCCESS_CHANGE_WORD', id: word.id, word: word.word, translate: word.translate});\r\nexport const deleteWordSuccess = (id) => ({type: 'SUCCESS_DELETE_WORD', id: id});","import fire from \"../../config/fire\";\r\nimport {takeEvery} from \"@redux-saga/core/effects\";\r\nimport {put} from \"redux-saga/effects\";\r\nimport {loaderToTrue, loaderToFalse} from '../ActionCreators/loader.action';\r\nimport {setUser} from '../ActionCreators/user.action';\r\nimport {setVocabulary} from '../ActionCreators/vocabulary.action';\r\n\r\nconst db = fire.firestore()\r\n\r\nfunction* register(action) {\r\n    yield put(loaderToTrue());\r\n    let user = yield fire.auth().createUserWithEmailAndPassword(action.user.email, action.user.password)\r\n        .then((data) => {\r\n            db.collection(data.user.email).doc().set({});\r\n            return data.user\r\n        })\r\n        .catch((er) => {\r\n            alert(\"Error: \" + er.toString())\r\n            return\r\n        })\r\n\r\n    if(user) {\r\n        yield put(setUser(user));\r\n    }\r\n    yield put(loaderToFalse());\r\n}\r\n\r\nfunction* login(action) {\r\n    yield put(loaderToTrue());\r\n    let user = yield fire.auth().signInWithEmailAndPassword(action.user.email, action.user.password)\r\n        .then((data) => {\r\n            return data.user\r\n        })\r\n        .catch((er) => {\r\n            alert(\"Error: \" + er.toString())\r\n            return\r\n        })\r\n    if(user) {\r\n        let data = yield db.collection(action.user.email).get();\r\n        let vocabulary = data.docs.map(doc => {\r\n            let word = doc.data();\r\n            word.id = doc.id;\r\n            return word;\r\n        });\r\n        yield put(setVocabulary(vocabulary));\r\n        yield put(setUser(user));\r\n    }\r\n    yield put(loaderToFalse());\r\n}\r\n\r\nexport default function* watchaAthorization() {\r\n    yield takeEvery(\"REGISTER_USER\", register);\r\n    yield takeEvery(\"LOGIN_USER\", login);\r\n}","export const loaderToTrue = () => ({type: 'LOADER_TO_TRUE'});\r\nexport const loaderToFalse = () => ({type: 'LOADER_TO_FALSE'});","import {takeEvery} from \"@redux-saga/core/effects\";\r\nimport {put} from \"redux-saga/effects\";\r\nimport {loaderToFalse, loaderToTrue} from \"../ActionCreators/loader.action\";\r\nimport fire from \"../../config/fire\";\r\nimport {setWord, changeWordSuccess, deleteWordSuccess} from \"../ActionCreators/vocabulary.action\";\r\n\r\nconst db = fire.firestore()\r\n\r\nfunction* addWord(action) {\r\n    yield put(loaderToTrue());\r\n    let doc = yield db.collection(action.user).doc()\r\n    let id = doc.id;\r\n    doc.set({word: action.word, translate: action.translate});\r\n    yield put(setWord({id: id, word: action.word, translate: action.translate}));\r\n    yield put(loaderToFalse());\r\n}\r\n\r\nfunction* changeWord(action) {\r\n    yield put(loaderToTrue());\r\n    yield db.collection(action.user).doc(action.id).set(action.word);\r\n    action.word.id = action.id;\r\n    yield put(changeWordSuccess(action.word));\r\n    yield put(loaderToFalse());\r\n}\r\n\r\nfunction* deleteWord(action) {\r\n    yield put(loaderToTrue());\r\n    yield db.collection(action.user).doc(action.id).delete();\r\n    yield put(deleteWordSuccess(action.id));\r\n    yield put(loaderToFalse());\r\n}\r\n\r\nexport default function* watchVacabulary() {\r\n    yield takeEvery(\"ADD_WORD\", addWord);\r\n    yield takeEvery(\"CHANGE_WORD\", changeWord);\r\n    yield takeEvery(\"DELETE_WORD\", deleteWord);\r\n}","import { all } from \"redux-saga/effects\";\r\nimport authorization from './authorization.saga';\r\nimport vacabulary from './vacabulary.saga';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([authorization(), vacabulary()]);\r\n}","export default (state = false, action) => {\r\n    switch (action.type) {\r\n        case 'LOADER_TO_TRUE':\r\n            return true;\r\n        case 'LOADER_TO_FALSE':\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};","import {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from \"../Sagas\";\r\nimport loaderReducer from '../Reducers/loader.reducer';\r\nimport userReducer from '../Reducers/user.reducer';\r\nimport vocabularyReducer from '../Reducers/vocabulary.reducer';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const rootReducer = combineReducers({\r\n    loader: loaderReducer,\r\n    user: userReducer,\r\n    vocabulary: vocabularyReducer\r\n});\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\r\nsagaMiddleware.run(rootSaga);","export default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case 'SET_USER':\r\n            return action.user;\r\n        default:\r\n            return state;\r\n    }\r\n};","export default (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'SET_VOCABULARY':\r\n            return action.vocabulary;\r\n        case 'SUCCESS_SET_WORD':\r\n            return [action.word, ...state];\r\n        case 'SUCCESS_CHANGE_WORD':\r\n            return state.map(el => {\r\n                if(el.id === action.id) {\r\n                    el.word = action.word;\r\n                    el.translate = action.translate;\r\n                    return el;\r\n                } else {\r\n                    return el;\r\n                }\r\n            })\r\n        case 'SUCCESS_DELETE_WORD':\r\n            return state.filter(el => el.id !== action.id)\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\r\nimport './App.css';\r\nimport Router from \"./Components/Router\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./Redux/Store/configureStore\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <Router/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}